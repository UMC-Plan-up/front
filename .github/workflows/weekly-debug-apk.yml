name: Weekly Debug APK & Git Log

on:
  schedule:
    - cron: '0 12 * * 3' # Îß§Ï£º ÏàòÏöîÏùº 12:00 UTC (ÌïúÍµ≠ 21:00)
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Git log start date (YYYY-MM-DD)'
        required: false
      end_date:
        description: 'Git log end date (YYYY-MM-DD)'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      apk_path: ${{ steps.apk.outputs.path }}
      build_time: ${{ steps.time.outputs.build_time }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/gradle.properties', '**/libs.versions.toml') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Grant execute permission
        run: chmod +x ./gradlew

      - name: Build Debug APK
        run: ./gradlew assembleDebug --build-cache

      - name: Verify APK
        id: apk
        run: |
          APK_PATH=app/build/outputs/apk/debug/app-debug.apk
          if [ ! -f "$APK_PATH" ]; then
            echo "‚ùå APK not found: $APK_PATH"
            exit 1
          fi
          echo "path=$APK_PATH" >> $GITHUB_OUTPUT

      - name: Save build timestamp
        id: time
        run: echo "build_time=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

  gitlog:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      commits: ${{ steps.gitlog.outputs.commits }}
      start_date: ${{ steps.gitlog.outputs.start_date }}
      end_date: ${{ steps.gitlog.outputs.end_date }}
    steps:
      - uses: actions/checkout@v4

      - name: Get commits for the period
        id: gitlog
        run: |
          set -x
          START_DATE="${{ github.event.inputs.start_date }}"
          END_DATE="${{ github.event.inputs.end_date }}"
          
          if [ -z "$START_DATE" ]; then
            START_DATE=$(date -d "1 week ago Wednesday" +%Y-%m-%d)
          fi
          if [ -z "$END_DATE" ]; then
            END_DATE=$(date -d "Wednesday" +%Y-%m-%d)
          fi
          
          COMMITS=$(git log --since="$START_DATE 00:00" --until="$END_DATE 23:59" \
            --pretty=format:"‚Ä¢ %s [%an, %h]" || true)
          if [ -z "$COMMITS" ]; then
            COMMITS="(No commits during this period)"
          fi
          {
            echo "commits<<EOF"
            echo "$COMMITS"
            echo "EOF"
            echo "start_date=$START_DATE"
            echo "end_date=$END_DATE"
          } >> "$GITHUB_OUTPUT"

  notify:
    runs-on: ubuntu-latest
    needs: [build, gitlog]
    env:
      SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
    steps:
      - name: Upload Debug APK to Slack
        uses: MeilCli/slack-upload-file@v4
        with:
          slack_token: ${{ env.SLACK_TOKEN }}
          channel_id: ${{ env.CHANNEL_ID }}
          file_path: ${{ needs.build.outputs.apk_path }}
          title: "üì¶ Weekly Debug APK"
          initial_comment: |
            *üóì Weekly Debug APK Build & Git Log*
            Branch: `${{ github.ref_name }}`
            Period: `${{ needs.gitlog.outputs.start_date }} ~ ${{ needs.gitlog.outputs.end_date }}`
            ÎπåÎìú ÏãúÍ∞Å: ${{ needs.build.outputs.build_time }}

            *Commits:*
            ${{ needs.gitlog.outputs.commits }}
